        -:    0:Source:test.c
        -:    0:Graph:test.gcno
        -:    0:Data:test.gcda
        -:    0:Runs:3
        -:    1:#include <stdlib.h>
        -:    2:#include <string.h>
        -:    3:#include <stdio.h>
        -:    4:
        -:    5:int hex_values[256];
        -:    6:
        3:    7:void init_hex_values()
        -:    8:{
      771:    9:    for (int i = 0; i < sizeof(hex_values) / sizeof(int); i++)
        -:   10:    {
      768:   11:        hex_values[i] = -1;
        -:   12:    }
        3:   13:    hex_values['0'] = 0;
        3:   14:    hex_values['1'] = 1;
        3:   15:    hex_values['2'] = 2;
        3:   16:    hex_values['3'] = 3;
        3:   17:    hex_values['4'] = 4;
        3:   18:    hex_values['5'] = 5;
        3:   19:    hex_values['6'] = 6;
        3:   20:    hex_values['7'] = 7;
        3:   21:    hex_values['8'] = 8;
        3:   22:    hex_values['9'] = 9;
        -:   23:
        3:   24:    hex_values['a'] = 10;
        3:   25:    hex_values['b'] = 11;
        3:   26:    hex_values['c'] = 12;
        3:   27:    hex_values['d'] = 13;
        3:   28:    hex_values['e'] = 14;
        3:   29:    hex_values['f'] = 15;
        -:   30:
        3:   31:    hex_values['A'] = 10;
        3:   32:    hex_values['B'] = 11;
        3:   33:    hex_values['C'] = 12;
        3:   34:    hex_values['D'] = 13;
        3:   35:    hex_values['E'] = 14;
        3:   36:    hex_values['F'] = 15;
        3:   37:}
        -:   38:
        3:   39:int cgi_decode(char *s, char *t)
        -:   40:{
       86:   41:    while (*s != '\0')
        -:   42:    {
       83:   43:        if (*s == '+')
        -:   44:            //l1
        9:   45:            *t++ = ' ';
       74:   46:        else if (*s == '%')
        -:   47:        {
        3:   48:            int digit_high = *++s;
        3:   49:            int digit_low = *++s;
        3:   50:            if (hex_values[digit_high] >= 0 && hex_values[digit_low] >= 0)
        -:   51:            {
        -:   52:                //l2
        3:   53:                *t++ = hex_values[digit_high] * 16 + hex_values[digit_low];
        -:   54:            }
        -:   55:            else
        -:   56:                //l3
    #####:   57:                return -1;
        -:   58:        }
        -:   59:        else
        -:   60:            //l4
       71:   61:            *t++ = *s;
       83:   62:        s++;
        -:   63:    }
        3:   64:    *t = '\0';
        3:   65:    return 0;
        -:   66:}
        -:   67:
        3:   68:int main(int argc, char *argv[])
        -:   69:{
        3:   70:    init_hex_values();
        -:   71:
        3:   72:    if (argc >= 2)
        -:   73:    {
        3:   74:        char *s = argv[1];
        3:   75:        char *t = malloc(strlen(s) + 1); /* output is at most as long as input */
        3:   76:        int ret = cgi_decode(s, t);
        3:   77:        printf("%s\n", t);
        3:   78:        return ret;
        -:   79:    }
        -:   80:    else
        -:   81:    {
    #####:   82:        printf("cgi_decode: usage: cgi_decode STRING\n");
    #####:   83:        return 1;
        -:   84:    }
        -:   85:}
